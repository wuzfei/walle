// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"go.uber.org/zap"
	"yema.dev/internal/handler"
	"yema.dev/internal/repository"
	"yema.dev/internal/server"
	"yema.dev/internal/service"
	"yema.dev/pkg/app"
	"yema.dev/pkg/db"
	"yema.dev/pkg/helper/sid"
	"yema.dev/pkg/jwt"
	"yema.dev/pkg/repo"
	"yema.dev/pkg/server/http"
	"yema.dev/pkg/ssh"
)

// Injectors from wire.go:

func NewWire(logger *zap.Logger, assetsHandler *handler.AssetsHandler, config *db.Config, sshConfig *ssh.Config, repoConfig *repo.Config, httpConfig *http.Config, jwtConfig *jwt.Config) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(jwtConfig)
	gormDB, err := db.NewDB(config, logger)
	if err != nil {
		return nil, nil, err
	}
	repositoryRepository := repository.NewRepository(gormDB, logger)
	userRepository := repository.NewUserRepository(repositoryRepository)
	handlerHandler := handler.NewHandler(logger)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userService := service.NewUserService(serviceService, userRepository)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	spaceRepository := repository.NewSpaceRepository(repositoryRepository)
	spaceService := service.NewSpaceService(serviceService, spaceRepository)
	spaceHandler := handler.NewSpaceHandler(handlerHandler, spaceService)
	serverRepository := repository.NewServerRepository(repositoryRepository)
	sshSsh, err := ssh.NewSSH(sshConfig)
	if err != nil {
		return nil, nil, err
	}
	serverService := service.NewServerService(serviceService, serverRepository, sshSsh)
	serverHandler := handler.NewServerHandler(handlerHandler, serverService)
	environmentRepository := repository.NewEnvironmentRepository(repositoryRepository)
	environmentService := service.NewEnvironmentService(serviceService, environmentRepository)
	environmentHandler := handler.NewEnvironmentHandler(handlerHandler, environmentService)
	projectRepository := repository.NewProjectRepository(repositoryRepository)
	repos := repo.NewRepos(repoConfig)
	projectService := service.NewProjectService(serviceService, projectRepository, serverRepository, sshSsh, repos)
	projectHandler := handler.NewProjectHandler(handlerHandler, projectService)
	deployRepository := repository.NewDeployRepository(repositoryRepository)
	deployService := service.NewDeployService(serviceService, deployRepository, projectRepository, serverRepository, sshSsh, repos)
	deployHandler := handler.NewDeployHandler(handlerHandler, deployService)
	commonHandler := handler.NewCommonHandler(handlerHandler)
	httpServer := server.NewHTTPServer(logger, jwtJWT, httpConfig, assetsHandler, userRepository, userHandler, spaceHandler, serverHandler, environmentHandler, projectHandler, deployHandler, commonHandler)
	job := server.NewJob(logger)
	appApp := newApp(httpServer, job)
	return appApp, func() {
	}, nil
}

// wire.go:

var pkgSet = wire.NewSet(db.NewDB, ssh.NewSSH, repo.NewRepos)

var repositorySet = wire.NewSet(repository.NewRepository, repository.NewTransaction, repository.NewUserRepository, repository.NewEnvironmentRepository, repository.NewSpaceRepository, repository.NewServerRepository, repository.NewProjectRepository, repository.NewDeployRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService, service.NewServerService, service.NewEnvironmentService, service.NewSpaceService, service.NewProjectService, service.NewDeployService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler, handler.NewEnvironmentHandler, handler.NewSpaceHandler, handler.NewServerHandler, handler.NewProjectHandler, handler.NewDeployHandler, handler.NewCommonHandler)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJob, server.NewTask)

// build App
func newApp(httpServer *http.Server, job *server.Job) *app.App {
	return app.NewApp(app.WithServer(httpServer, job), app.WithName("demo-server"))
}
